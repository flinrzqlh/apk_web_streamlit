# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11l4qvG96rIOO4VqoTUMejS4igkrLv2D7

# Very Simple Regression

## 1) IMPORT LIBRARIES AND DATASETS
"""

# Import Pkgs
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
files.upload()

# read the csv file
student_marks_data = pd.read_csv('student_marks_data.csv')

student_marks_data

student_marks_data.head()

student_marks_data.tail(8)

student_marks_data= student_marks_data[student_marks_data['Marks'] >= 0]

# Check the minimum marks
student_marks_data['Marks'].min()

student_marks_data

"""## 2) Exploratory Data Analysis (EDA) and Visualizations"""

# check if there are any Null values
student_marks_data.isnull().sum()

# Check the dataframe info
student_marks_data.info()

# Statistical summary of the dataframe
student_marks_data.describe()

# number of hours studied corresponding to strudents with maximum marks
max = student_marks_data[student_marks_data['Marks'] == student_marks_data['Marks'].max()]

max

# number of hours studied corresponding to strudents with minimum marks
min = student_marks_data[student_marks_data['Marks'] == student_marks_data['Marks'].min()]

min

# Histogram Plotting (Data Distribution)
student_marks_data.hist(bins = 30, figsize = (20,10), color = 'r')

# Plot Pairplot (Variables Relationship)
sns.pairplot(student_marks_data)

# Correlation Matrix
corr_matrix = student_marks_data.corr()
sns.heatmap(corr_matrix, annot = True)
plt.show()

# Regression Plot with Seaborn (straight line fit between "Marks" and "Hours Studied")
sns.regplot(x='Hours_Studied',y='Marks',data=student_marks_data)

"""## 3) TRAINING AND TESTING DATA"""

X = student_marks_data[['Hours_Studied']]
y = student_marks_data[['Marks']]

X

y

X.shape

y.shape

X = np.array(X)
y = np.array(y)

X.shape

# split the data into test and train sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=72)

X_train.shape

X_test.shape

print(X)

# We can see that data have been shuffled by "train_test_split
X_train

"""## 4) Train a Linear Regression Model"""

# using linear regression model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lr = LinearRegression(fit_intercept = True) # Fit intercept is the "b" parameter (y = b + mx)
lr.fit(X_train, y_train)

# Checking the accuracy
y_pred = lr.predict(X_test)
mse = mean_squared_error(y_test,y_pred)
mse

print('Linear Model Coefficient (m): ', lr.coef_)
print('Linear Model Coefficient (b): ', lr.intercept_)

"""## 5) EVALUATE TRAINED MODEL PERFORMANCE"""

y_pred

# Plotting the TRAIN DATA
plt.figure(figsize=(16,8))
plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, lr.predict(X_train), color = 'red')
plt.ylabel('Marks')
plt.xlabel('Number of Hours Studied')
plt.title('Marks vs Hours Studied')

"""## 6) Making Predictions
 - Use the trained model to obtain the salary corresponding to eployees who have 5 years of experience
"""

new_value = [[5.0]]
new_prediction = lr.predict(new_value)
new_prediction

"""## 7) Save the Model"""

import joblib

model_file = open("linear_regression_student_marks.pkl","wb")
joblib.dump(lr,model_file)
model_file.close()

files.download('linear_regression_student_marks.pkl')

